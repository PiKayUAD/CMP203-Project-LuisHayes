struct PassBuffer
{
	matrix View;
	matrix Proj;
};

struct World
{
	matrix WorldTransform;
};

struct V2P
{
	float4 pos : S_POSITION;
	float2 uv : TEXCOORD0;
	float3 normal : NORMAL0;
};

struct InputVertex
{
	float3 pos;
	float2 uv;
	float3 normal;
	float3 tangent;
	float3 binormal;
};


ConstantBuffer<PassBuffer> gPassBuffer : register(b0, space0);
ConstantBuffer<World> gWorldBuffer : register(b1, space0);
RegularBuffer<InputVertex> gVertices;

SrtSignature gSignature
{
	DescriptorTable(CBV(b1)),
	//CBV(b0, space=1),
	CBV(b0, space=0),
}

[SrtSignature(gSignature)]
V2P main(uint id : S_VERTEX_ID)
{
	V2P ret;

	InputVertex vertex = gVertices[id];

	matrix mvp = mul(gPassBuffer.Proj , mul( gPassBuffer.View , gWorldBuffer.WorldTransform));
	ret.pos = float4(vertex.pos, 1);
	ret.pos = mul(mvp, ret.pos );

	ret.uv = vertex.uv;
	ret.normal = normalize( mul(  float3x3(gWorldBuffer.WorldTransform), vertex.normal));
	return ret;
}
//
//struct SRT
//{
	//ConstantBuffer<Skateboard::PassBuffer> Skateboard::PassBuffer;
	//RegularBuffer<InputVertex> Vertices;
//};
//
//V2P main(uint id : S_VERTEX_ID, uniform SRT const* pSrt : S_SRT_DATA)
//{
	//V2P ret;
//
	//InputVertex vertex = pSrt->Vertices[id];
//
	//ret.pos = float4(vertex.pos, 1);
	//ret.pos = mul(pSrt->Skateboard::PassBuffer.View, ret.pos);
	//ret.pos = mul(pSrt->Skateboard::PassBuffer.Proj, ret.pos);
	//ret.uv = vertex.uv;
	//ret.normal = vertex.normal;
//
	//return ret;
//}