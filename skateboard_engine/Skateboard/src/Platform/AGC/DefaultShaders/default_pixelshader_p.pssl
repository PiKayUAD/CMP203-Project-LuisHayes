struct V2P
{
	float4 pos : S_POSITION;
	float2 uv : TEXCOORD0;
	float3 normal : NORMAL0;
};

struct Light
{
    float3 Diffuse;
    float FalloffStart;
    float3 Direction;
    float FalloffEnd;
    float3 Position;
    float SpotPower;
    float3 Radiance;
    float Pad;
    float4x4 ViewProjTex;
};

struct Lights
{
    Light light;
    float3 CameraPosition;
    float Pad1;
};

struct Material
{
    float4 Albedo;
    int AlbedoMapIndex;
    int3 padding;
    float3 Fresnel;
    float Metallic;
    float3 Specular;
    float Roughness;
};

// Schlick gives an approximation to Fresnel reflectance (see pg. 233 "Real-Time Rendering 3rd Ed.").
// R0 = ( (n-1)/(n+1) )^2, where n is the index of refraction.
float3 SchlickFresnel(float3 R0, float3 normal, float3 lightVec)
{
    float cosIncidentAngle = saturate(dot(normal, lightVec));

    float f0 = 1.0f - cosIncidentAngle;
    float3 reflectPercent = R0 + (1.0f - R0) * (f0 * f0 * f0 * f0 * f0);

    return reflectPercent;
}

float3 BlinnPhong(float3 lightStrength, float3 lightVec, float3 normal, float3 toEye, Material M)
{
    // TODO: Need to add material support.
    const float m = M.Roughness * 256.0f;
    float3 halfVec = normalize(toEye + lightVec);

    float roughnessFactor = (m + 8.0f) * pow(max(dot(halfVec, normal), 0.0f), m) / 8.0f;

    // TODO: Implement fresnel parameter in material component.
    float3 fresnelFactor = SchlickFresnel(M.Fresnel, halfVec, lightVec);

    float3 specAlbedo = fresnelFactor * roughnessFactor;

    // Our spec formula goes outside [0,1] range, but we are 
    // doing LDR rendering.  So scale it down a bit.
    specAlbedo = specAlbedo / (specAlbedo + 1.0f);

    // TODO: Again need material support.
    return (M.Albedo.rgb + specAlbedo) * lightStrength;
}

//---------------------------------------------------------------------------------------
// Evaluates the lighting equation for directional lights.
//---------------------------------------------------------------------------------------
float3 ComputeDirectionalLight(Light L, Material M, float3 normal, float3 toEye)
{
    // The light vector aims opposite the direction the light rays travel.
    float3 lightVec = -L.Direction;

    // Scale light down by Lambert's cosine law.
    float ndotl = max(dot(lightVec, normal), 0.0f);
    float3 lightStrength = L.Diffuse * ndotl;

    return BlinnPhong(lightStrength, lightVec, normal, toEye, M);
}

Texture2D<float4> inputTexture : register(t0, space0);
Texture2D<float4> inputTexture1 : register(t2, space0);
Texture2D<float4> inputTexture2 : register(t3, space0);
SamplerState sampler : register(s0, space0);

ConstantBuffer<Lights> gLights : register(b3, space0);
RegularBuffer<Material> gMaterials : register(t1, space0);

SrtSignature gSignature
{
	DescriptorTable(SRV(t0, space=0), SRV(t1, space=0),SRV(t2, space=0),SRV(t3, space=0)),
	//SRV(t0, space=0),
	Sampler(s0, space=0),
    CBV(b3, space=0)
}

[SrtSignature(gSignature)]
float4 main(V2P input) : S_TARGET_OUTPUT0
{	
	//return float4(input.normal *.5f.xxx + .5f.xxx, 1.f);
	//return inputTexture[0].rgba;
	//return inputTexture.Sample(sampler, input.uv);

    //return float4(input.normal,1);

    float3 ldiffuse = ComputeDirectionalLight(gLights.light, gMaterials[0], input.normal, gLights.CameraPosition - input.pos.xyz);

	return inputTexture.Sample(sampler, input.uv) * float4(ldiffuse, 1);


}
